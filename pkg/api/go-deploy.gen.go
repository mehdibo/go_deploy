// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
)

// ApplicationCollection defines model for ApplicationCollection.
type ApplicationCollection struct {
	Items []ApplicationCollectionItem `json:"items"`
}

// ApplicationCollectionItem defines model for ApplicationCollectionItem.
type ApplicationCollectionItem struct {
	Description *string `json:"description,omitempty"`
	Id          int     `json:"id"`
	Name        string  `json:"name"`
}

// CreatedApplication defines model for CreatedApplication.
type CreatedApplication struct {
	Description *string `json:"description,omitempty"`
	Id          int     `json:"id"`
	Name        string  `json:"name"`

	// Secret used to trigger a deployment, store somewhere safe
	RawSecret string `json:"rawSecret"`
}

// NewApplication defines model for NewApplication.
type NewApplication struct {
	Description *string `json:"description,omitempty"`

	// A list of HTTP requests to send
	HttpTasks *[]NewHttpTask `json:"httpTasks,omitempty"`
	Name      string         `json:"name"`

	// A list oh SSH commands to run
	SshTasks *[]NewSshTask `json:"sshTasks,omitempty"`
}

// NewHttpTask defines model for NewHttpTask.
type NewHttpTask struct {
	Body *string `json:"body,omitempty"`

	// An object of Header-name:Value
	Headers *map[string]interface{} `json:"headers,omitempty"`
	Method  string                  `json:"method"`

	// The lower the number the higher the priority
	Priority int    `json:"priority"`
	Url      string `json:"url"`
}

// NewSshTask defines model for NewSshTask.
type NewSshTask struct {
	// Command to run on the target host
	Command string `json:"command"`
	Host    string `json:"host"`
	Port    int    `json:"port"`

	// The lower the number the higher the priority
	Priority int    `json:"priority"`
	Username string `json:"username"`
}

// AddApplicationJSONBody defines parameters for AddApplication.
type AddApplicationJSONBody NewApplication

// AddApplicationJSONRequestBody defines body for AddApplication for application/json ContentType.
type AddApplicationJSONRequestBody AddApplicationJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /applications)
	GetApplications(ctx echo.Context) error

	// (POST /applications)
	AddApplication(ctx echo.Context) error

	// (GET /ping)
	Ping(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApplications converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplications(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplications(ctx)
	return err
}

// AddApplication converts echo context to params.
func (w *ServerInterfaceWrapper) AddApplication(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddApplication(ctx)
	return err
}

// Ping converts echo context to params.
func (w *ServerInterfaceWrapper) Ping(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Ping(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/applications", wrapper.GetApplications)
	router.POST(baseURL+"/applications", wrapper.AddApplication)
	router.GET(baseURL+"/ping", wrapper.Ping)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xXTXPbNhD9Kxi0R1aUnboHnmo7mdidxvFEbn3waDIQuSKREgCLXVpVPfrvnQUpiRSp",
	"2Jk00QnCx+Lt29234JNMnamcBUsokyfpAStnEcKfP6yqqXBe/wvZG++d58kMMPW6Iu2sTOR5TQVY0qni",
	"CaHt0nnTjlEYjahtLpwX2j6qUmcykgWoDHy44P7+/mPHAvAcpgUYxSNaVyATieS1zeWGf1G7HE6fV1XZ",
	"XnzpyhLSBtOTrLyrwJNuvNAEpj/40cNSJvKHeO973NqNR41eExi5ibaIlPdqLRmNh79r7SGTyUNrfr7b",
	"5RafICU+dtzmAGyP3QEFkdRZZ1pbghw8z1tlYIyzA4jMf9g6BvPSgyLIOmi/Ob5IerWaQeqBhrnVzIsa",
	"IRPkBHmd5+CFEhlUpVsbsBQJJOdBoDOwKoBHagkyejEPXQCRJIV/jYfwBlZfxUtBVN0F68MSEqVGEm4p",
	"ru7ubgXjBCRklxEsI31R4t7A6qq9ZJiqnwkAYvEMsELMZlcidcYomwVcvrZfAGvW3PBsAR1NzK5rA+YX",
	"LluPU77XmQO/rGhsB87Drp/47uRPVdad5NkDMECFy0Zvqbx2XtN6eM1dAaJ0K/CCChC2Not2WOi8aIe7",
	"05E02mpTG5lMo5H6qX35fHl3rTWIm4NHON3GZUBpG+qhS5fNQpsCwtngBCmfA4nCIQ0rL5JhfpQ659uq",
	"X6q6JJmcnkbSqH8aGn45O3t11qHlZIyW78U+gn+ZwnZM7g61FLQORzt6h2HhcoS0ZgMzrp8mHBcKdcpt",
	"ctce+cyCZ/d8s8DI0CG5BzdRtKTSwDAYpUuZSANFpicLV9u1+jXnyUnqzFYLE/mO18VFWG9zp7GMSRzn",
	"mop6wQfiYGfhYuamT/tbJ14Hdeb2rwQ5VwoqFAUpAYucM32ZC/nUSnvQX86uRuGF2ksuykiWOgWLIQpb",
	"wNd3A5yuAouu9ilMnM/j9hDGvJclSFMJXaQyko/gscF/MplOpryNrahKy0S+mkwnpxw9RUWIR9yDlTzJ",
	"fKx7vQU6xM81Fv5cZ82G8/567/F1Op1uowg22O9Yiz9h02j2r6UvftQ02XJY4NtV1sYefN5MKkfO8h7u",
	"eShlHKGgeVAIJSysRLd9HlJxnmX95TY7Llpt/19IOGjhm37pkq9h8w1DMPK4GuG/syzS5oTAOk0BcVmX",
	"5fpzUdhEMq5Yk45l5Aeg2lsuS9SmKkH8Nnt/I7YehycWIAm9DOKI4B/Bcxn72lq2exi122byqyjrNx4D",
	"iCqHXlOQlQvXDHX3UDwHbN46m+/846L+eXpyLE47L+LhV8/206OVZpk89ET5QX54//ubj+ev313fyPlm",
	"zjuZOwwbG3GKWUs2881/AQAA//8TBLQWcA0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
