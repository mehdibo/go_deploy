// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
)

// Defines values for TaskItemTaskType.
const (
	TaskItemTaskTypeHttpTask TaskItemTaskType = "HttpTask"

	TaskItemTaskTypeSshTask TaskItemTaskType = "SshTask"
)

// ApplicationCollection defines model for ApplicationCollection.
type ApplicationCollection struct {
	Items []ApplicationCollectionItem `json:"items"`
}

// ApplicationCollectionItem defines model for ApplicationCollectionItem.
type ApplicationCollectionItem struct {
	Description *string `json:"description,omitempty"`
	Id          int     `json:"id"`
	Name        string  `json:"name"`
}

// ApplicationItem defines model for ApplicationItem.
type ApplicationItem struct {
	Description    *string     `json:"description,omitempty"`
	Id             int         `json:"id"`
	LastDeployedAt *time.Time  `json:"lastDeployedAt,omitempty"`
	LatestCommit   *string     `json:"latestCommit,omitempty"`
	LatestVersion  *string     `json:"latestVersion,omitempty"`
	Name           string      `json:"name"`
	Tasks          *[]TaskItem `json:"tasks,omitempty"`
}

// CreatedApplication defines model for CreatedApplication.
type CreatedApplication struct {
	Description *string `json:"description,omitempty"`
	Id          int     `json:"id"`
	Name        string  `json:"name"`

	// Secret used to trigger a deployment, store somewhere safe
	RawSecret string `json:"rawSecret"`
}

// HttpTaskItem defines model for HttpTaskItem.
type HttpTaskItem struct {
	Body *string `json:"body,omitempty"`

	// An object containing headers and their values, all values must be of the type string
	Headers *map[string]interface{} `json:"headers,omitempty"`
	Method  string                  `json:"method"`
	Url     string                  `json:"url"`
}

// NewApplication defines model for NewApplication.
type NewApplication struct {
	Description *string `json:"description,omitempty"`

	// A list of HTTP requests to send
	HttpTasks *[]NewHttpTask `json:"httpTasks,omitempty"`
	Name      string         `json:"name"`

	// A list oh SSH commands to run
	SshTasks *[]NewSshTask `json:"sshTasks,omitempty"`
}

// NewHttpTask defines model for NewHttpTask.
type NewHttpTask struct {
	Body *string `json:"body,omitempty"`

	// An object of Header-name:Value
	Headers *map[string]interface{} `json:"headers,omitempty"`
	Method  string                  `json:"method"`

	// The lower the number the higher the priority
	Priority int    `json:"priority"`
	Url      string `json:"url"`
}

// NewSshTask defines model for NewSshTask.
type NewSshTask struct {
	// Command to run on the target host
	Command string `json:"command"`

	// SHA256 server fingerprint
	Fingerprint string `json:"fingerprint"`
	Host        string `json:"host"`
	Port        int    `json:"port"`

	// The lower the number the higher the priority
	Priority int    `json:"priority"`
	Username string `json:"username"`
}

// SshTaskItem defines model for SshTaskItem.
type SshTaskItem struct {
	Command  string `json:"command"`
	Host     string `json:"host"`
	Port     int    `json:"port"`
	Username string `json:"username"`
}

// TaskItem defines model for TaskItem.
type TaskItem struct {
	Priority int `json:"priority"`

	// Can either contain HTTP or SSH task
	Task interface{} `json:"task"`

	// Can be either ssh or http
	TaskType TaskItemTaskType `json:"taskType"`
}

// Can be either ssh or http
type TaskItemTaskType string

// TriggerDeployment defines model for TriggerDeployment.
type TriggerDeployment struct {
	// The deployed commit's hash
	Commit *string `json:"commit,omitempty"`

	// Secret obtained when creating the application
	Secret string `json:"secret"`

	// The version being deployed
	Version *string `json:"version,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Message string `json:"message"`
}

// AddApplicationJSONBody defines parameters for AddApplication.
type AddApplicationJSONBody NewApplication

// DeployApplicationJSONBody defines parameters for DeployApplication.
type DeployApplicationJSONBody TriggerDeployment

// AddApplicationJSONRequestBody defines body for AddApplication for application/json ContentType.
type AddApplicationJSONRequestBody AddApplicationJSONBody

// DeployApplicationJSONRequestBody defines body for DeployApplication for application/json ContentType.
type DeployApplicationJSONRequestBody DeployApplicationJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /applications)
	GetApplications(ctx echo.Context) error

	// (POST /applications)
	AddApplication(ctx echo.Context) error

	// (GET /applications/{id})
	GetApplication(ctx echo.Context, id int) error

	// (POST /applications/{id}/deploy)
	DeployApplication(ctx echo.Context, id int) error

	// (POST /applications/{id}/regenerate)
	RegenerateApplicationSecret(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApplications converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplications(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplications(ctx)
	return err
}

// AddApplication converts echo context to params.
func (w *ServerInterfaceWrapper) AddApplication(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddApplication(ctx)
	return err
}

// GetApplication converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplication(ctx, id)
	return err
}

// DeployApplication converts echo context to params.
func (w *ServerInterfaceWrapper) DeployApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeployApplication(ctx, id)
	return err
}

// RegenerateApplicationSecret converts echo context to params.
func (w *ServerInterfaceWrapper) RegenerateApplicationSecret(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegenerateApplicationSecret(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/applications", wrapper.GetApplications)
	router.POST(baseURL+"/applications", wrapper.AddApplication)
	router.GET(baseURL+"/applications/:id", wrapper.GetApplication)
	router.POST(baseURL+"/applications/:id/deploy", wrapper.DeployApplication)
	router.POST(baseURL+"/applications/:id/regenerate", wrapper.RegenerateApplicationSecret)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
