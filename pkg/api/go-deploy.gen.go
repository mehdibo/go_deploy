// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
)

// Defines values for TaskItemTaskType.
const (
	TaskItemTaskTypeHttpTask TaskItemTaskType = "HttpTask"

	TaskItemTaskTypeSshTask TaskItemTaskType = "SshTask"
)

// ApplicationCollection defines model for ApplicationCollection.
type ApplicationCollection struct {
	Items []ApplicationCollectionItem `json:"items"`
}

// ApplicationCollectionItem defines model for ApplicationCollectionItem.
type ApplicationCollectionItem struct {
	Description *string `json:"description,omitempty"`
	Id          int     `json:"id"`
	Name        string  `json:"name"`
}

// ApplicationItem defines model for ApplicationItem.
type ApplicationItem struct {
	Description    *string     `json:"description,omitempty"`
	Id             int         `json:"id"`
	LastDeployedAt *time.Time  `json:"lastDeployedAt,omitempty"`
	LatestCommit   *string     `json:"latestCommit,omitempty"`
	LatestVersion  *string     `json:"latestVersion,omitempty"`
	Name           string      `json:"name"`
	Tasks          *[]TaskItem `json:"tasks,omitempty"`
}

// CreatedApplication defines model for CreatedApplication.
type CreatedApplication struct {
	Description *string `json:"description,omitempty"`
	Id          int     `json:"id"`
	Name        string  `json:"name"`

	// Secret used to trigger a deployment, store somewhere safe
	RawSecret string `json:"rawSecret"`
}

// HttpTaskItem defines model for HttpTaskItem.
type HttpTaskItem struct {
	Body *string `json:"body,omitempty"`

	// An object containing headers and their values, all values must be of the type string
	Headers *map[string]interface{} `json:"headers,omitempty"`
	Method  string                  `json:"method"`
	Url     string                  `json:"url"`
}

// NewApplication defines model for NewApplication.
type NewApplication struct {
	Description *string `json:"description,omitempty"`

	// A list of HTTP requests to send
	HttpTasks *[]NewHttpTask `json:"httpTasks,omitempty"`
	Name      string         `json:"name"`

	// A list oh SSH commands to run
	SshTasks *[]NewSshTask `json:"sshTasks,omitempty"`
}

// NewHttpTask defines model for NewHttpTask.
type NewHttpTask struct {
	Body *string `json:"body,omitempty"`

	// An object of Header-name:Value
	Headers *map[string]interface{} `json:"headers,omitempty"`
	Method  string                  `json:"method"`

	// The lower the number the higher the priority
	Priority int    `json:"priority"`
	Url      string `json:"url"`
}

// NewSshTask defines model for NewSshTask.
type NewSshTask struct {
	// Command to run on the target host
	Command string `json:"command"`

	// SHA256 server fingerprint
	Fingerprint string `json:"fingerprint"`
	Host        string `json:"host"`
	Port        int    `json:"port"`

	// The lower the number the higher the priority
	Priority int    `json:"priority"`
	Username string `json:"username"`
}

// SshTaskItem defines model for SshTaskItem.
type SshTaskItem struct {
	Command  string `json:"command"`
	Host     string `json:"host"`
	Port     int    `json:"port"`
	Username string `json:"username"`
}

// TaskItem defines model for TaskItem.
type TaskItem struct {
	Priority int `json:"priority"`

	// Can either contain HTTP or SSH task
	Task interface{} `json:"task"`

	// Can be either ssh or http
	TaskType TaskItemTaskType `json:"taskType"`
}

// Can be either ssh or http
type TaskItemTaskType string

// TriggerDeployment defines model for TriggerDeployment.
type TriggerDeployment struct {
	// The deployed commit's hash
	Commit *string `json:"commit,omitempty"`

	// Secret obtained when creating the application
	Secret string `json:"secret"`

	// The version being deployed
	Version *string `json:"version,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Message string `json:"message"`
}

// AddApplicationJSONBody defines parameters for AddApplication.
type AddApplicationJSONBody NewApplication

// DeployApplicationJSONBody defines parameters for DeployApplication.
type DeployApplicationJSONBody TriggerDeployment

// AddApplicationJSONRequestBody defines body for AddApplication for application/json ContentType.
type AddApplicationJSONRequestBody AddApplicationJSONBody

// DeployApplicationJSONRequestBody defines body for DeployApplication for application/json ContentType.
type DeployApplicationJSONRequestBody DeployApplicationJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /applications)
	GetApplications(ctx echo.Context) error

	// (POST /applications)
	AddApplication(ctx echo.Context) error

	// (DELETE /applications/{id})
	DeleteApplication(ctx echo.Context, id int) error

	// (GET /applications/{id})
	GetApplication(ctx echo.Context, id int) error

	// (POST /applications/{id}/deploy)
	DeployApplication(ctx echo.Context, id int) error

	// (POST /applications/{id}/regenerate)
	RegenerateApplicationSecret(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApplications converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplications(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplications(ctx)
	return err
}

// AddApplication converts echo context to params.
func (w *ServerInterfaceWrapper) AddApplication(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddApplication(ctx)
	return err
}

// DeleteApplication converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteApplication(ctx, id)
	return err
}

// GetApplication converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplication(ctx, id)
	return err
}

// DeployApplication converts echo context to params.
func (w *ServerInterfaceWrapper) DeployApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeployApplication(ctx, id)
	return err
}

// RegenerateApplicationSecret converts echo context to params.
func (w *ServerInterfaceWrapper) RegenerateApplicationSecret(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RegenerateApplicationSecret(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/applications", wrapper.GetApplications)
	router.POST(baseURL+"/applications", wrapper.AddApplication)
	router.DELETE(baseURL+"/applications/:id", wrapper.DeleteApplication)
	router.GET(baseURL+"/applications/:id", wrapper.GetApplication)
	router.POST(baseURL+"/applications/:id/deploy", wrapper.DeployApplication)
	router.POST(baseURL+"/applications/:id/regenerate", wrapper.RegenerateApplicationSecret)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"POzLmW8bAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
