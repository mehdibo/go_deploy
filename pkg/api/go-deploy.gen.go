// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
)

// Defines values for TaskItemTaskType.
const (
	TaskItemTaskTypeHttpTask TaskItemTaskType = "HttpTask"

	TaskItemTaskTypeSshTask TaskItemTaskType = "SshTask"
)

// ApplicationCollection defines model for ApplicationCollection.
type ApplicationCollection struct {
	Items []ApplicationCollectionItem `json:"items"`
}

// ApplicationCollectionItem defines model for ApplicationCollectionItem.
type ApplicationCollectionItem struct {
	Description *string `json:"description,omitempty"`
	Id          int     `json:"id"`
	Name        string  `json:"name"`
}

// ApplicationItem defines model for ApplicationItem.
type ApplicationItem struct {
	Description    *string     `json:"description,omitempty"`
	Id             int         `json:"id"`
	LastDeployedAt *time.Time  `json:"lastDeployedAt,omitempty"`
	LatestCommit   *string     `json:"latestCommit,omitempty"`
	LatestVersion  *string     `json:"latestVersion,omitempty"`
	Name           string      `json:"name"`
	Tasks          *[]TaskItem `json:"tasks,omitempty"`
}

// CreatedApplication defines model for CreatedApplication.
type CreatedApplication struct {
	Description *string `json:"description,omitempty"`
	Id          int     `json:"id"`
	Name        string  `json:"name"`

	// Secret used to trigger a deployment, store somewhere safe
	RawSecret string `json:"rawSecret"`
}

// HttpTaskItem defines model for HttpTaskItem.
type HttpTaskItem struct {
	Body *string `json:"body,omitempty"`

	// An object of Header-name:Value
	Headers *map[string]interface{} `json:"headers,omitempty"`
	Method  string                  `json:"method"`
	Url     string                  `json:"url"`
}

// NewApplication defines model for NewApplication.
type NewApplication struct {
	Description *string `json:"description,omitempty"`

	// A list of HTTP requests to send
	HttpTasks *[]NewHttpTask `json:"httpTasks,omitempty"`
	Name      string         `json:"name"`

	// A list oh SSH commands to run
	SshTasks *[]NewSshTask `json:"sshTasks,omitempty"`
}

// NewHttpTask defines model for NewHttpTask.
type NewHttpTask struct {
	Body *string `json:"body,omitempty"`

	// An object of Header-name:Value
	Headers *map[string]interface{} `json:"headers,omitempty"`
	Method  string                  `json:"method"`

	// The lower the number the higher the priority
	Priority int    `json:"priority"`
	Url      string `json:"url"`
}

// NewSshTask defines model for NewSshTask.
type NewSshTask struct {
	// Command to run on the target host
	Command string `json:"command"`
	Host    string `json:"host"`
	Port    int    `json:"port"`

	// The lower the number the higher the priority
	Priority int    `json:"priority"`
	Username string `json:"username"`
}

// SshTaskItem defines model for SshTaskItem.
type SshTaskItem struct {
	Command  string `json:"command"`
	Host     string `json:"host"`
	Port     int    `json:"port"`
	Username string `json:"username"`
}

// TaskItem defines model for TaskItem.
type TaskItem struct {
	Priority int `json:"priority"`

	// Can either contain HTTP or SSH task
	Task interface{} `json:"task"`

	// Can be either ssh or http
	TaskType TaskItemTaskType `json:"taskType"`
}

// Can be either ssh or http
type TaskItemTaskType string

// AddApplicationJSONBody defines parameters for AddApplication.
type AddApplicationJSONBody NewApplication

// AddApplicationJSONRequestBody defines body for AddApplication for application/json ContentType.
type AddApplicationJSONRequestBody AddApplicationJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /applications)
	GetApplications(ctx echo.Context) error

	// (POST /applications)
	AddApplication(ctx echo.Context) error

	// (GET /applications/{id})
	GetApplication(ctx echo.Context, id int) error

	// (GET /ping)
	Ping(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApplications converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplications(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplications(ctx)
	return err
}

// AddApplication converts echo context to params.
func (w *ServerInterfaceWrapper) AddApplication(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddApplication(ctx)
	return err
}

// GetApplication converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplication(ctx, id)
	return err
}

// Ping converts echo context to params.
func (w *ServerInterfaceWrapper) Ping(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Ping(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/applications", wrapper.GetApplications)
	router.POST(baseURL+"/applications", wrapper.AddApplication)
	router.GET(baseURL+"/applications/:id", wrapper.GetApplication)
	router.GET(baseURL+"/ping", wrapper.Ping)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYT3PUuBP9Kir9fkczHgLswacNgYVsLYEiWTikUpTG7rEFluSV2mRnU/7uWy1pJvbY",
	"M5MQoDYnR39ar18/dbfmhudGNUaDRsezG27BNUY78P+cGfzNtLp4aa2xNFCAy61sUBrNM/4enGltDkwb",
	"ZEtayLuE/6lFi5Wx8h/YtfG4xQo0ylzQAJN6aayK344p6ZzUJTOWSf1V1LLgCa9AFGA9qo8fP37qWQAa",
	"c3kFStAXrhrgGXdopS55R39JnPa7j5umjgefmLqGPGC64Y01DViUwXWJoIYf/7ew5Bn/X3pLWBrtppNG",
	"TxEUERIRCWvFihMaC3+10kLBs8to/mqzyiw+Q460bbfNEdgBuyMKEi6L3rDUCCVYGtdCwRRnWxCJf7/0",
	"AMzvC64WDl9AU5sVFMdIa4JKeMYLgfAIpQKejO3VAsHhiVFK4uSBYcEHsG4XpB28JByF+3J3VVwI9+Vu",
	"ItjL8IkFgVD0iP7hCki4FdfnkFvA8e0N46x1UDA0DK0sS7BMsMJHS4HGhDk0FpgzCq4roC+xnIjWTh76",
	"ANa0T3HzGrHZ0DxiZWGK1aR3vWyylZk0C8aZWbLXftUjApR9EHXbc+AWgQKsTDF5SmvrgWzp/0MURHNh",
	"85THZ3D9ICVUkbEp51ktXfD84uIdI1jg0FGQHWgCdSfZn8H1Oixj5e+RnHPVAWAVOz9/zXKjlNCFx2Vb",
	"fQ9Y5+GEg/dx51Xsu/ZfU1tjpbESV+NjLipgtbkGy7ACplu1iJ+VLKv4udmdcCW1VK3i2TyZyBhR1PtV",
	"3Ld2B0Gv4zKiNIZ67NJJmIgSYEZ7J1DYEpBVxuFUZfDjk9QZG/PcUrQ18uzoKOFK/B1o+OXZsyfPerQ8",
	"nqLlZ7HvwN6tavdMbjZFCqLDyYbeqbDEmEwn1l5c7s/yQ7z6Jld2+9GP2hgWRk1uSU9oBhIpdLnRKKQO",
	"6dJYn538poQbDW+XPLvcn5P6JHfJ/rWDUtddRXwXHvUUxgWsYTpXETrK/DzhoEldl5vSyTex7pF3WFSb",
	"wyNPY+IppUPe0vpz8iFQ/lw4mVP7vmnbac+CRm/vrIfqO3d6GwTFaRS51w8oIWuecQVVIWcL0+qV+LWk",
	"wVlu1LqDyPgbmmfP/XzMP8Gyy9K0lFi1C9qQejsLk1LIhzS+Mix0oPQsEQyNqRlWAn05Au0o7wxLpc9J",
	"sSHyXQtlqNAXMXFbth1PeC1z0M4Hbw349GKE0zSgwytrZmyZxk0upbUkAYk19JHyhH9dd7b88Ww+m9My",
	"siIayTP+ZDafHdG1EVj5eKQDWNkNL6d6vleA2/jpHoW2vwgLjofzg5fk0Xy+jiJob79nLf3sQrNy+4q7",
	"92MrqGW7SKxnqb4O4HcJfzp/vOukDfR0/Jjt/MUrHV2HgcdXPsW5CfJCA88E03DN+s3bNonHRTGcjrp6",
	"HjuL70LfVgPZDe842ha6Hxi8icfMROR60ywPO5hr8xycW7Z1vdoXhS4Zajq9kUV3V2Ef0LW/OFYoQN/P",
	"Xd7swX36gjpTGqW7dpuW/CNnSHgy/v1iU4a6q59zlUJZ2R8KGR+z33p1aOfTwzuHPzsdCHVDdWpXdN8D",
	"tlZT7nZSNTWw38/fnrH1Sf71Cg6ZXPouzIH9CpZyvW21JrvbangXBh8Uj2EHosA5UcKg++SN8ceMa/F2",
	"hR1F653R5ca/B2W5rl+/vdR7lfuSv3/7x8tPxy/enJ7xK5Jo4C7ciVDBUio43VX3bwAAAP//aAXbqGIU",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
