// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BasicAuthScopes = "BasicAuth.Scopes"
)

// Defines values for TaskItemTaskType.
const (
	TaskItemTaskTypeHttpTask TaskItemTaskType = "HttpTask"

	TaskItemTaskTypeSshTask TaskItemTaskType = "SshTask"
)

// ApplicationCollection defines model for ApplicationCollection.
type ApplicationCollection struct {
	Items []ApplicationCollectionItem `json:"items"`
}

// ApplicationCollectionItem defines model for ApplicationCollectionItem.
type ApplicationCollectionItem struct {
	Description *string `json:"description,omitempty"`
	Id          int     `json:"id"`
	Name        string  `json:"name"`
}

// ApplicationItem defines model for ApplicationItem.
type ApplicationItem struct {
	Description    *string     `json:"description,omitempty"`
	Id             int         `json:"id"`
	LastDeployedAt *time.Time  `json:"lastDeployedAt,omitempty"`
	LatestCommit   *string     `json:"latestCommit,omitempty"`
	LatestVersion  *string     `json:"latestVersion,omitempty"`
	Name           string      `json:"name"`
	Tasks          *[]TaskItem `json:"tasks,omitempty"`
}

// CreatedApplication defines model for CreatedApplication.
type CreatedApplication struct {
	Description *string `json:"description,omitempty"`
	Id          int     `json:"id"`
	Name        string  `json:"name"`

	// Secret used to trigger a deployment, store somewhere safe
	RawSecret string `json:"rawSecret"`
}

// HttpTaskItem defines model for HttpTaskItem.
type HttpTaskItem struct {
	Body *string `json:"body,omitempty"`

	// An object of Header-name:Value
	Headers *map[string]interface{} `json:"headers,omitempty"`
	Method  string                  `json:"method"`
	Url     string                  `json:"url"`
}

// NewApplication defines model for NewApplication.
type NewApplication struct {
	Description *string `json:"description,omitempty"`

	// A list of HTTP requests to send
	HttpTasks *[]NewHttpTask `json:"httpTasks,omitempty"`
	Name      string         `json:"name"`

	// A list oh SSH commands to run
	SshTasks *[]NewSshTask `json:"sshTasks,omitempty"`
}

// NewHttpTask defines model for NewHttpTask.
type NewHttpTask struct {
	Body *string `json:"body,omitempty"`

	// An object of Header-name:Value
	Headers *map[string]interface{} `json:"headers,omitempty"`
	Method  string                  `json:"method"`

	// The lower the number the higher the priority
	Priority int    `json:"priority"`
	Url      string `json:"url"`
}

// NewSshTask defines model for NewSshTask.
type NewSshTask struct {
	// Command to run on the target host
	Command string `json:"command"`
	Host    string `json:"host"`
	Port    int    `json:"port"`

	// The lower the number the higher the priority
	Priority int    `json:"priority"`
	Username string `json:"username"`
}

// SshTaskItem defines model for SshTaskItem.
type SshTaskItem struct {
	Command  string `json:"command"`
	Host     string `json:"host"`
	Port     int    `json:"port"`
	Username string `json:"username"`
}

// TaskItem defines model for TaskItem.
type TaskItem struct {
	Priority int `json:"priority"`

	// Can either contain HTTP or SSH task
	Task interface{} `json:"task"`

	// Can be either ssh or http
	TaskType TaskItemTaskType `json:"taskType"`
}

// Can be either ssh or http
type TaskItemTaskType string

// TriggerDeployment defines model for TriggerDeployment.
type TriggerDeployment struct {
	// The deployed commit's hash
	Commit *string `json:"commit,omitempty"`

	// Secret obtained when creating the application
	Secret string `json:"secret"`

	// The version being deployed
	Version *string `json:"version,omitempty"`
}

// BadRequest defines model for BadRequest.
type BadRequest struct {
	Message string `json:"message"`
}

// AddApplicationJSONBody defines parameters for AddApplication.
type AddApplicationJSONBody NewApplication

// DeployApplicationJSONBody defines parameters for DeployApplication.
type DeployApplicationJSONBody TriggerDeployment

// AddApplicationJSONRequestBody defines body for AddApplication for application/json ContentType.
type AddApplicationJSONRequestBody AddApplicationJSONBody

// DeployApplicationJSONRequestBody defines body for DeployApplication for application/json ContentType.
type DeployApplicationJSONRequestBody DeployApplicationJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /applications)
	GetApplications(ctx echo.Context) error

	// (POST /applications)
	AddApplication(ctx echo.Context) error

	// (GET /applications/{id})
	GetApplication(ctx echo.Context, id int) error

	// (POST /applications/{id}/deploy)
	DeployApplication(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetApplications converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplications(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplications(ctx)
	return err
}

// AddApplication converts echo context to params.
func (w *ServerInterfaceWrapper) AddApplication(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddApplication(ctx)
	return err
}

// GetApplication converts echo context to params.
func (w *ServerInterfaceWrapper) GetApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApplication(ctx, id)
	return err
}

// DeployApplication converts echo context to params.
func (w *ServerInterfaceWrapper) DeployApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BasicAuthScopes, []string{"ROLE_ADMIN"})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeployApplication(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/applications", wrapper.GetApplications)
	router.POST(baseURL+"/applications", wrapper.AddApplication)
	router.GET(baseURL+"/applications/:id", wrapper.GetApplication)
	router.POST(baseURL+"/applications/:id/deploy", wrapper.DeployApplication)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xYW2/bOBP9KwS/D9gXNXLTZh/0tG7SbQNs00WT7UsQLGhpbLGVSJUc1esN9N8XQ9K2",
	"FNGX9Ia+ybwMZ845HM74nue6brQChZZn99yAbbSy4H68EMU7+NSCRfqVa4Wg3KdomkrmAqVW6QerFY3Z",
	"vIRa0FdjdAMGpTdSg7ViAfSJqwZ4xi0aqRa86xJu4FMrDRQ8u90svEvWC/XsA+TIO1pZgM2NbOhInvGb",
	"EpjxrjELCpm0TKrPopIF7xJ+pfF33aripTHa0MnD3e/A6tbkwJRGNqeFtOkvJVostZH/wq6N0xZLUBhC",
	"Z1LNtanDt2W1tFaqBdNm60uXBGAcFtMtbue6qiD3dh9CJhHq4cf/Dcx5xv+XbtlKg900avQSoaagApLC",
	"GLEaIe7Nj/FO+G6bI2cHCI04TrgsesNSISzA0LgS9RGikAUPSw+4+W2dq4TFC2gqvYJi6iTvmeYZLwTC",
	"E5Q18GRsrxIIFs91XUuMHugXvAdjd7m0A5eEo7Afj1fFjbAfjxPBXoTPDQiEogf0d1dAwo1YXkNuAMc3",
	"0I+z1kLBUDM0crEAwwQrHFs1KEyYRW2AWV3DsgT6EvMIWztx6Duwhj2GzWvEZgPzCJWZLlbR6EoQBRgb",
	"yS6KeeNMz9lrt+oJOZS9F1XbC2DrQQ1Y6iJ6SmuqgWzpd3IwAztzfnMs4itYfpUSyoBYLHhWSesjv7n5",
	"c53cLZFsQZFTR8n+CpZrWsbK3yM5a8sDjpXs+vo1y3VdC1U4v0yrHuHWtT/h4H3ceRX7of1samuM1Ebi",
	"anwMvdSVXoJhWAJTbT0Ln6VclOFzszvhtVSybmueTZJIxgii3q/ivrUjBL3mZQRpoHoc0rmfCBJgWrkg",
	"UJgFICu1xdjL4Maj0GkT8txctBXy7PQ04bX4x8Pw69nZs7MeLE9jsPwo9C2Y417tnsnNpgBBCDjZwBuj",
	"JXAST6w9Xh6P8tdE9UWh7I6jz9rYLQyafCA9oRhIJOqoHBdS+XSpjctOblPCtYK3c57d7s9JfZC7ZP/a",
	"wVPX3QX/bpzXMR9nsHbT2pK8o8zPEw6K1HW7eTr5huseeIdFtTk84BQF3pcGF5u6IK4kifFbU4Tqj/lF",
	"v1hWClvGbrbdX6roGdEEBVuWoFhO9RQ1CXTzem1UzPDnbZU49i9MshmQtbW3B5/44Gykx3KBtATwNZG+",
	"7gCtzKnr2XR4tGdGo9ujHLeuSaOGaN0qitxhArWQFc94DWUhT2a6VSvx24IGT3Jdr0uujL+hefbCzYeE",
	"7S3bLE0XEst2RhtSZ2emUz7qCV9p5smmXkww1LpiWAp07zcoS4l6WFu4JB4qSFfmUUr3UPa5sTzhlcxB",
	"Waf2tcOXNyM/dQPKt5Yn2izSsMmmtJbujMQK+p7yHsn86cnkZELLyIpoJM/4s5PJySnlGYGl4yMduJXd",
	"80VMea8AH/pPsvd9UuEXTIfzg77/dDJ5VMP/6O401tJvZ6kgGbjfJfz55Omukzaup+MOvnOZamFJ+oOI",
	"79ybYCPg+Y6HCaZgyaaDGzoEcVoUw+mgqxehFPsm8D2ouLvhfUbTQvcdyYt0fxHmetM+v0HBbJvnYO28",
	"rarVPha6ZKjp9F4W3bHCPqBrd3GMqAFdAXx7v8fvywsq5WmU7to2LbmucAh40gPv4bvd3f2Yq+Tf4f1U",
	"yND9f+nVoZ3PD+8c/tf2WKpTn27d2xy9juEZ7/X3I9Z9Lv0ZiP/2939cxXQhBwxEdjYGbruFfWqhhcIz",
	"OjnMaO9v359JPr0KxXHaq01u+bu3f7z8e3rx5vKK3xEXFsznNfn+jU7pSe3uuv8CAAD//8y2pHHyFgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
